// Code generated by protoc-gen-corpc.

package proto

import "corpc"

type GreeterClient interface {
	SayHello(args *HelloRequest) (*HelloReply, error)
}

type greeterClient struct {
	cc *corpc.Client
}

func NewGreeterClient(cc *corpc.Client) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(args *HelloRequest) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Call("GreeterService.SayHello", args, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type GreeterServer interface {
	SayHello(*HelloRequest, *HelloReply) error
}

func RegisterGreeterServer(s *corpc.Server, srv GreeterServer) {
	s.RegisterName("GreeterService", srv)
}

type AuthClient interface {
	Login(args *LoginRequest) (*LoginReply, error)
	Logout(args *LogoutReq) (*LogoutReply, error)
}

type authClient struct {
	cc *corpc.Client
}

func NewAuthClient(cc *corpc.Client) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(args *LoginRequest) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Call("AuthService.Login", args, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Logout(args *LogoutReq) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Call("AuthService.Logout", args, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type AuthServer interface {
	Login(*LoginRequest, *LoginReply) error
	Logout(*LogoutReq, *LogoutReply) error
}

func RegisterAuthServer(s *corpc.Server, srv AuthServer) {
	s.RegisterName("AuthService", srv)
}

type Greeter struct{}

func (s *Greeter) SayHello(args *HelloRequest, reply *HelloReply) error {
	// define your service ...
	return nil
}

type Auth struct{}

func (s *Auth) Login(args *LoginRequest, reply *LoginReply) error {
	// define your service ...
	return nil
}

func (s *Auth) Logout(args *LogoutReq, reply *LogoutReply) error {
	// define your service ...
	return nil
}
